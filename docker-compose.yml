version: "3.9"
services:
  web:
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.app
    ports:
      - "8080:3000"
    networks: 
      - interhub
    profiles: ['app']
    depends_on:
      solr:
        condition: service_started
      db:
        condition: service_started
    restart: unless-stopped

  solr-user-fix:
    image: alpine
    profiles: ['app']
    volumes:
      - type: bind
        source: ./solr-data
        target: /var/solr/
    command: sh -c "chown -R 8983:8983 /var/solr"
    networks:
      - interhub

  solr:
    image: solr
    volumes:
      - type: bind
        source: ./solr-data
        target: /var/solr/
    ports:
      - "8983:8983"
    environment:
      - SOLR_HEAP=4g
    hostname: solr
    restart: unless-stopped
    profiles: ['app']
    networks:
       interhub:    
          aliases:
            - solr.charles
    depends_on:
      solr-user-fix:
        condition: service_completed_successfully

  ker:
    build: ./packages/nanoker
    hostname: ker
    ports:
      - "8547:8547"
    restart: unless-stopped
    profiles: ['app']
    deploy:
        resources:
            limits:
                memory: "512M"
    networks:
       interhub:    
          aliases:
            - ker.charles
  db:
    image: postgres
    restart: unless-stopped
    hostname: db
    volumes:
      - type: bind
        source: ./postgres-data
        target: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    deploy:
        resources:
            limits:
                memory: "1G"
    profiles: ['app']
    environment:
      POSTGRES_PASSWORD: charles_explorer_db_password
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
        interhub:    
            aliases:
              - postgres.charles

  social-network:
    build: 
      context: .
      dockerfile: ./dockerfiles/Dockerfile.graph
    restart: unless-stopped
    deploy:
        resources:
            limits:
                memory: "512M"
    volumes:
      - type: bind
        source: ./packages/go-network/graph.db
        target: /app/graph.db
    profiles: ['app']
    networks:
      interhub:    
          aliases:
            - gonetwork.charles

  seed-data:
    build: 
      context: .
      dockerfile: ./dockerfiles/Dockerfile.importer
    restart: "no"
    tty: true
    volumes:
      - type: bind
        source: ./explorer.db
        target: /app/explorer.db
      - type: bind
        source: ./packages/feeder/src/transformers.ts
        target: /app/packages/feeder/src/transformers.ts
      - type: bind
        source: ./packages/database-scripts/
        target: /app/packages/database-scripts/
      - type: bind
        source: ./packages/go-network/
        target: /app/packages/go-network/
      - type: bind
        source: ./.env
        target: /app/.env
    profiles: ['seeder']
    networks:
        interhub:    
            aliases:
              - seeder.charles
    command:
      - /bin/sh
      - -c
      - |
        cd /app
        cp /app/.env /app/packages/prisma
        cd /app/packages/prisma
        npx prisma migrate deploy
        cd /app/packages/feeder
        npx ts-node src/index.ts
        cd /app
        rm -f graph.db
        sqlite3 /app/explorer.db < /app/packages/database-scripts/sqlite-graph.sql
        mv /app/graph.db /app/packages/go-network/graph.db

networks:
  interhub:
    driver: bridge
